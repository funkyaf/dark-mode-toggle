{"version":3,"sources":["theme.ts","global.js","Components/ToggleSwitch.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["lightTheme","body","text","toggleBorder","gradient","darkTheme","GlobalStyles","createGlobalStyle","theme","ToggleSwitch","className","htmlFor","this","props","Name","type","name","id","onChange","OnChange","Component","App","useState","setTheme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OACaA,EAAa,CACtBC,KAAM,UACNC,KAAM,UACNC,aAAc,OACdC,SAAU,qCAGDC,EAAY,CACrBJ,KAAM,UACNC,KAAM,UACNC,aAAc,UACdC,SAAU,qC,8gBCVP,IAAME,EAAeC,YAAH,KASP,qBAAGC,MAAkBP,QAC1B,qBAAGO,MAAkBN,Q,gCCFbO,G,6KAEjB,OACE,qBAAKC,UAAU,gBAAf,SACE,wBAAOA,UAAU,sBAAsBC,QAASC,KAAKC,MAAMC,KAA3D,UACI,uBACAC,KAAK,WACLL,UAAU,yBACVM,KAAMJ,KAAKC,MAAMC,KACjBG,GAAIL,KAAKC,MAAMC,KACfI,SAAUN,KAAKC,MAAMM,WAErB,sBAAMT,UAAU,0B,GAZcU,cCJ3B,SAASC,IAAO,IAAD,EAEFC,mBAAS,SAFP,mBAErBd,EAFqB,KAEde,EAFc,KAW5B,OACE,cAAC,IAAD,CAAef,MAAiB,UAAVA,EAAoBR,EAAaK,EAAvD,SACE,qCACE,cAACC,EAAD,IACA,cAAC,EAAD,CAAcQ,KAAK,cAAcK,SAZnB,WAEhBI,EADY,UAAVf,EACO,OAEA,YASP,yCAAYA,EAAZ,aACA,gCCrBR,IAYegB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACd,EAAD,MAEFe,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.48487d87.chunk.js","sourcesContent":["// light theme opts\r\nexport const lightTheme = {\r\n    body: '#E2E2E2',\r\n    text: '#363537',\r\n    toggleBorder: '#FFF',\r\n    gradient: 'linear-gradient(#39598A, #79D7ED)',\r\n}\r\n// dark theme opts\r\nexport const darkTheme = {\r\n    body: '#363537',\r\n    text: '#FAFAFA',\r\n    toggleBorder: '#6B8096',\r\n    gradient: 'linear-gradient(#091236, #1E215D)',\r\n}\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  *,\r\n  *::after,\r\n  *::before {\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    align-items: center;\r\n    background: ${({ theme }) => theme.body};\r\n    color: ${({ theme }) => theme.text};\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    height: 100vh;\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\r\n    transition: all 0.25s linear;\r\n  }\r\n\r\n  #mode-switch {\r\n    align: center;\r\n  }\r\n`\r\n","import React, { Component } from \"react\";\r\nimport './ToggleSwitch.css';\r\n\r\ninterface ToggleProps {\r\n    Name?: string;\r\n    OnChange?: () => any;\r\n}\r\ninterface ToggleState {\r\n}\r\n\r\nexport default class ToggleSwitch extends Component<ToggleProps, ToggleState> {\r\n  render() {\r\n    return (\r\n      <div className=\"toggle-switch\">\r\n        <label className=\"toggle-switch-label\" htmlFor={this.props.Name}>\r\n            <input\r\n            type=\"checkbox\"\r\n            className=\"toggle-switch-checkbox\"\r\n            name={this.props.Name}\r\n            id={this.props.Name}\r\n            onChange={this.props.OnChange}\r\n            />\r\n            <span className=\"slider round\"></span>\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme } from './theme';\nimport { GlobalStyles } from './global';\nimport ToggleSwitch from './Components/ToggleSwitch'\n\nexport default function App() {\n\n  const [theme, setTheme] = useState('light');\n  const toggleTheme = () => {\n    if (theme === 'light') {\n      setTheme('dark');\n    } else {\n      setTheme('light');\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n      <>\n        <GlobalStyles />\n        <ToggleSwitch Name=\"mode-switch\" OnChange={toggleTheme}/>\n        <h1>It's a {theme} theme!</h1>\n        <footer>\n        </footer>\n      </>\n    </ThemeProvider>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}